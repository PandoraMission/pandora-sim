{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#pandorasim","title":"PandoraSim","text":"<p>This Python package contains classes to simulate data from Pandora, and provides estimates for level 1 products from the spacecraft.</p>"},{"location":"#installation","title":"Installation","text":"<p>If you are installing the simulator and expect you will not wish to tweak any of the code internal to the simulator or any other aspects of DPC software, you can install <code>pandora-sim</code> with <code>pip</code></p> <pre><code>pip install pandorasim --upgrade\n</code></pre> <p>However, if you are either:</p> <ol> <li>Expect to tweak/update <code>pandorasim</code> or any of the Pandora software dependencies</li> <li>Need to run <code>pandorasim</code> in a different environment to your native environment</li> </ol> <p>You may want to install with <code>poetry</code>. You can do this with</p> <pre><code>pip install --upgrade poetry\ngit clone https://github.com/PandoraMission/pandora-sim\ncd pandorasim\npoetry install\n</code></pre> <p>To run <code>pandorasim</code> you can then work however you work in Python, be make sure you</p> <ol> <li>Are working in the <code>pandorasim</code> directoy</li> <li>Use the correct <code>poetry</code> environment by prepending all your commands with <code>poetry run</code>. E.g. <code>poetry run jupyterlab</code>, <code>poetry run python</code>, <code>poetry run pytest</code> etc.</li> </ol>"},{"location":"#dependencies","title":"Dependencies","text":"<p>This package depends on two other packages from the Pandora software ecosystem.</p> <ul> <li><code>pandorasat</code></li> <li><code>pandorapsf</code></li> </ul> <p>Each of these packages are updated often as we gain new insights into what to expect from Pandora. If you are working with the simulator, you should make sure to keep your versions of all packages updated.</p>"},{"location":"nirsim/","title":"Documentation for <code>NIRSim</code>","text":"<p>               Bases: <code>Sim</code></p>"},{"location":"nirsim/#pandorasim.nirsim.NIRSim.observe","title":"<code>observe(SC_Resets1=1, SC_Resets2=1, SC_DropFrames1=0, SC_DropFrames2=16, SC_DropFrames3=0, SC_ReadFrames=4, SC_Groups=2, SC_Integrations=10, start_time=Time('2000-01-01T12:00:00', scale='utc'), target_spectrum_function=None, noise=True, jitter=True, output_type='fits')</code>","text":"<p>Returns an observation as though taken from the Pandora Observatory.</p>"},{"location":"nirsim/#pandorasim.nirsim.NIRSim.observe--parameters","title":"Parameters:","text":""},{"location":"nirsim/#pandorasim.nirsim.NIRSim.observe--returns","title":"Returns:","text":"<p>result : np.ndarray or astropy.io.fits.HDUList     Result of the simulation. Either a numpy array with shape (nROIs, nframes, nrows, ncolumns), or a fits format.</p>"},{"location":"nirsim/#pandorasim.nirsim.NIRSim.point","title":"<code>point(ra, dec, roll)</code>","text":"<p>Point the simulation in a direction.</p>"},{"location":"nirsim/#pandorasim.nirsim.NIRSim.show_subarray","title":"<code>show_subarray(**kwargs)</code>","text":"<p>Plot an example subarray observation.</p>"},{"location":"sim/","title":"Documentation for <code>Sim</code>","text":"<p><code>Sim</code> is a a base class that other simulator objects can use. <code>Sim</code> is an abstract base class that implements some of the methods necessary to be a simulator.</p> <p>               Bases: <code>ABC</code></p>"},{"location":"sim/#pandorasim.sim.Sim.pixel_to_world","title":"<code>pixel_to_world(row, column, distortion=True)</code>","text":"<p>Helper function. This function ensures we keep the row-major convention in pandora-sim.</p>"},{"location":"sim/#pandorasim.sim.Sim.pixel_to_world--parameters","title":"Parameters:","text":"<p>row : float     Pixel row position to be converted to sky coordinates. column : float     Pixel column position to be converted to sky coordinates. distortion : bool     Flag whether to account for the distortion in the WCS when converting from pixel position     to sky coordinates. Default is True.</p>"},{"location":"sim/#pandorasim.sim.Sim.pixel_to_world--returns","title":"Returns","text":"<p>np.ndarray     RA and Dec of input pixel positions.</p>"},{"location":"sim/#pandorasim.sim.Sim.world_to_pixel","title":"<code>world_to_pixel(ra, dec, distortion=True)</code>","text":"<p>Helper function. This function ensures we keep the row-major convention in pandora-sim.</p>"},{"location":"sim/#pandorasim.sim.Sim.world_to_pixel--parameters","title":"Parameters:","text":"<p>ra : float     Right Ascension to be converted to pixel position. dec : float     Declination to be converted to pixel position. distortion : bool     Flag whether to account for the distortion in the WCS when converting from RA/Dec     to pixel position. Default is True.</p>"},{"location":"sim/#pandorasim.sim.Sim.world_to_pixel--returns","title":"Returns","text":"<p>np.ndarray     Row and column positions of each provided RA and Dec.</p>"},{"location":"visiblesim/","title":"Documentation for <code>VisibleSim</code>","text":"<p>               Bases: <code>Sim</code></p>"},{"location":"visiblesim/#pandorasim.visiblesim.VisibleSim.get_FFI","title":"<code>get_FFI(nreads=50, noise=True)</code>","text":"<p>Get a single frame of data as an FFI</p>"},{"location":"visiblesim/#pandorasim.visiblesim.VisibleSim.get_FFI--returns","title":"Returns:","text":"<p>data : np.ndarray     Returns a single FFI as a numpy array with dtype uint32.</p>"},{"location":"visiblesim/#pandorasim.visiblesim.VisibleSim.observe","title":"<code>observe(nreads=50, nframes=100, start_time=Time('2000-01-01T12:00:00', scale='utc'), target_flux_function=None, noise=True, jitter=True, output_type='fits', bin_frames=10)</code>","text":"<p>Returns an observation as though taken from the Pandora Observatory.</p>"},{"location":"visiblesim/#pandorasim.visiblesim.VisibleSim.observe--parameters","title":"Parameters:","text":""},{"location":"visiblesim/#pandorasim.visiblesim.VisibleSim.observe--returns","title":"Returns:","text":"<p>result : np.ndarray or astropy.io.fits.HDUList     Result of the simulation. Either a numpy array with shape (nROIs, nframes, nrows, ncolumns), or a fits format.</p>"},{"location":"visiblesim/#pandorasim.visiblesim.VisibleSim.point","title":"<code>point(ra, dec, roll)</code>","text":"<p>Point the simulation in a direction.</p>"},{"location":"visiblesim/#pandorasim.visiblesim.VisibleSim.select_ROI_corners","title":"<code>select_ROI_corners(nROIs, magnitude_limit=14)</code>","text":"<p>Selects the corners of ROIs.</p> <p>This is currently a placeholder. SOC will provide direction on how ROIs will be selected.</p>"},{"location":"visiblesim/#pandorasim.visiblesim.VisibleSim.select_ROI_corners--parameters","title":"Parameters:","text":"<p>magnitude_limit : float     Visual magnitude limit down to which ROI targets will be considered.</p>"},{"location":"visiblesim/#pandorasim.visiblesim.VisibleSim.show_FFI","title":"<code>show_FFI(ax=None)</code>","text":"<p>Plot an example of an FFI.</p>"},{"location":"visiblesim/#pandorasim.visiblesim.VisibleSim.show_ROI","title":"<code>show_ROI()</code>","text":"<p>Plot an example of an ROI.</p>"}]}